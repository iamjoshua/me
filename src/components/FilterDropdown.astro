---
import { getCollection } from "astro:content";
import { cn } from "@/lib/utils";

interface Props {
  currentCategory?: string;
  basePath?: string;
}

const { currentCategory, basePath = "/readings" } = Astro.props;

const readings = await getCollection("readings");
const categories = [
  ...new Set(readings.map((reading) => reading.data.category)),
];
const categoryCounts = categories.reduce((acc, cat) => {
  acc[cat] = readings.filter((reading) => reading.data.category === cat).length;
  return acc;
}, {});

const filterItems = [
  {
    label: "All",
    count: readings.length,
    href: basePath,
    isActive: !currentCategory,
  },
  ...categories.map((cat) => ({
    label: cat
      .split(" ")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" "),
    count: categoryCounts[cat],
    href: `${basePath}/${cat.replace(/ /g, "_")}`,
    isActive: currentCategory === cat,
  })),
];

const activeItem = filterItems.find(item => item.isActive) || filterItems[0];
---

<div class="w-screen lg:w-full space-y-2 mt-12 lg:mt-12 mb-6 lg:max-w-5/6 overflow-visible">
  <div class="px-5 lg:px-0">
    <div class="relative inline-block">
      <button
        id="category-dropdown"
        class={cn(
          "min-w-fit flex items-center px-3 py-1 text-xs border rounded-full text-gray-700 hover:border-gray-400 transition-colors border-gray-200 cursor-pointer",
          activeItem.isActive && "border-transparent bg-sky-900 text-white",
        )}
      >
        <svg class="w-3 h-3 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414L11.414 12a1 1 0 01-1.414 0L6.707 8.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
        {activeItem.label}
        <span
          class={cn(
            "inline-block px-2 py-1 ml-3 -mr-2 text-[10px] bg-gray-200 text-gray-600 rounded-full",
            activeItem.isActive && "bg-sky-950/50 text-sky-200",
          )}
        >
          {activeItem.count}
        </span>
      </button>
      
      <div
        id="category-dropdown-menu"
        class="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-50 min-w-full hidden"
      >
        {filterItems.map((item) => (
          <a
            href={item.href}
            class={cn(
              "block px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 first:rounded-t-md last:rounded-b-md whitespace-nowrap",
              item.isActive && "bg-sky-50 text-sky-900 font-medium",
            )}
          >
            <span class="flex items-center justify-between">
              {item.label}
              <span class="inline-block px-2 py-1 ml-3 text-[10px] bg-gray-200 text-gray-600 rounded-full">
                {item.count}
              </span>
            </span>
          </a>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  function initDropdown() {
    const button = document.getElementById('category-dropdown');
    const menu = document.getElementById('category-dropdown-menu');
    
    if (button && menu) {
      button.addEventListener('click', function(e) {
        e.stopPropagation();
        menu.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function() {
        menu.classList.add('hidden');
      });
      
      // Prevent menu from closing when clicking inside it
      menu.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    }
  }

  document.addEventListener("astro:page-load", initDropdown);
</script>