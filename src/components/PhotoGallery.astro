---
import { Image } from "astro:assets";
import AnimateOnLoad from "./AnimateOnLoad.astro";

interface Props {
  photos: Array<{
    id: string;
    data: {
      filename: string;
      title: string;
      imageUrl: string;
      path: string;
    };
  }>;
}

const { photos } = Astro.props;
---

<div class="w-full mb-22">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
    {
      photos.map((photo, index) => (
        <AnimateOnLoad
          type="slideUp"
          delay={index * 0.1}
        >
          <div class="group cursor-pointer" onclick={`openLightbox('${photo.data.imageUrl}', '${photo.data.title}')`}>
            <div class="overflow-hidden rounded-lg aspect-square bg-gray-100">
              <Image
                src={photo.data.imageUrl}
                alt={photo.data.title}
                width={400}
                height={400}
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                loading="lazy"
              />
            </div>
            <div class="mt-3">
              <h3 class="text-sm font-medium text-gray-800 font-[Inter]">
                {photo.data.title}
              </h3>
            </div>
          </div>
        </AnimateOnLoad>
      ))
    }
  </div>
</div>

<!-- Lightbox Modal -->
<div id="lightbox" class="fixed inset-0 z-50 hidden bg-black bg-opacity-90 flex items-center justify-center p-4">
  <div class="relative w-full h-full flex items-center justify-center">
    <img id="lightbox-image" src="" alt="" class="max-w-[90vw] max-h-[90vh] w-auto h-auto object-contain" />
    <button 
      id="close-lightbox" 
      class="absolute top-4 right-4 text-white text-2xl font-light hover:text-gray-300 transition-colors w-8 h-8 flex items-center justify-center z-10"
      onclick="closeLightbox()"
    >
      Ã—
    </button>
  </div>
</div>

<script>
  function openLightbox(imageUrl: string, title: string) {
    const lightbox = document.getElementById('lightbox');
    const image = document.getElementById('lightbox-image') as HTMLImageElement;
    
    if (lightbox && image) {
      image.src = imageUrl;
      image.alt = title;
      lightbox.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }
  
  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
      lightbox.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }
  
  // Close lightbox on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeLightbox();
    }
  });
  
  // Close lightbox on background click
  document.getElementById('lightbox')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      closeLightbox();
    }
  });
  
  // Make functions globally available
  (window as any).openLightbox = openLightbox;
  (window as any).closeLightbox = closeLightbox;
</script>