---
import { cn } from "@/lib/utils";

interface Props {
  id: string;
  label: string;
  options: Array<{
    label: string;
    count: number;
    href: string;
    isActive: boolean;
  }>;
  activeButtonClass: string;
  activeCountClass: string;
  menuActiveClass: string;
}

const { id, label, options, activeButtonClass, activeCountClass, menuActiveClass } = Astro.props;
const activeOption = options.find(option => option.isActive);
---

<div class="relative inline-block">
  <button
    id={`${id}-button`}
    class={cn(
      "min-w-fit flex items-center px-3 py-1 text-xs border rounded-full text-gray-700 hover:border-gray-400 transition-colors border-gray-200 cursor-pointer",
      activeOption && activeButtonClass,
    )}
  >
    <svg class="w-3 h-3 mr-2" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414L11.414 12a1 1 0 01-1.414 0L6.707 8.707a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
    {activeOption ? activeOption.label : label}
    {activeOption && (
      <span class={cn("inline-block px-2 py-1 ml-3 -mr-2 text-[10px] rounded-full", activeCountClass)}>
        {activeOption.count}
      </span>
    )}
  </button>
  
  <div
    id={`${id}-menu`}
    class="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-50 min-w-full hidden"
  >
    {options.map((option) => (
      <a
        href={option.href}
        class={cn(
          "block px-3 py-2 text-xs text-gray-700 hover:bg-gray-50 first:rounded-t-md last:rounded-b-md whitespace-nowrap",
          option.isActive && menuActiveClass,
        )}
      >
        <span class="flex items-center justify-between">
          {option.label}
          <span class="inline-block px-2 py-1 ml-3 text-[10px] bg-gray-200 text-gray-600 rounded-full">
            {option.count}
          </span>
        </span>
      </a>
    ))}
  </div>
</div>