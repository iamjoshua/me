---
import Photograph from "./Photograph.astro";
import Lightbox from "./Lightbox.astro";

interface Props {
  photos: Array<{
    id: string;
    data: {
      filename: string;
      title: string;
      imageUrl: string;
      path: string;
    };
  }>;
}

const { photos } = Astro.props;
// Desktop horizontal: duplicate for density if desired
// const renderPhotos = Array.from({ length: 3 }).flatMap(() => photos);
const renderPhotos = photos;
const mid = Math.ceil(renderPhotos.length / 2);
const row1 = renderPhotos.slice(0, mid);
const row2 = renderPhotos.slice(mid);
// const renderPhotos = photos;
---

<!-- Mobile: restore simple vertical flow with body scrolling -->
<div class="md:hidden w-full">
  <div class="flex flex-wrap gap-4 justify-center px-4">
    {photos.map((photo, index) => <Photograph photo={photo} index={index} />)}
  </div>
</div>

<!-- Desktop: horizontal two-row scroller -->
<div
  id="photo-horizontal"
  class="hidden md:block w-full overflow-x-auto overflow-y-hidden"
>
  <div class="flex flex-col gap-6 lg:gap-8">
    <div
      class="flex flex-nowrap items-start justify-start gap-6 lg:gap-8 px-12"
    >
      {row1.map((photo, index) => <Photograph photo={photo} index={index} />)}
      <div class="w-12 h-full opacity-0">space</div>
    </div>
    <div
      class="flex flex-nowrap items-start justify-start gap-6 lg:gap-8 px-12"
    >
      {
        row2.map((photo, index) => (
          <Photograph photo={photo} index={index + row1.length} />
        ))
      }
      <div class="w-12 h-full opacity-0">space</div>
    </div>
  </div>
</div>

<Lightbox />

<script>
  // Desktop-only wheel-to-horizontal scroll with clean attach/detach on viewport changes.
  const horizontal = document.getElementById("photo-horizontal");
  let containerWheelHandler = null;
  let windowWheelHandler = null;
  const desktopMQ = window.matchMedia("(min-width: 1024px)");
  const finePointerMQ = window.matchMedia("(pointer: fine)");

  function detachHandlers() {
    if (!horizontal) return;
    if (containerWheelHandler) {
      horizontal.removeEventListener("wheel", containerWheelHandler);
      containerWheelHandler = null;
    }
    if (windowWheelHandler) {
      window.removeEventListener("wheel", windowWheelHandler);
      windowWheelHandler = null;
    }
  }

  function attachHandlers() {
    if (!horizontal) return;
    const isDesktop = desktopMQ.matches && finePointerMQ.matches;
    // Always detach first so we don't duplicate or fight mobile scroll
    detachHandlers();
    if (!isDesktop) return;

    containerWheelHandler = (e) => {
      if (e.ctrlKey) return;
      if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) {
        e.preventDefault();
        horizontal.scrollLeft += e.deltaY;
      }
    };
    horizontal.addEventListener("wheel", containerWheelHandler, {
      passive: false,
    });

    windowWheelHandler = (e) => {
      if (e.ctrlKey) return;
      const lb = document.getElementById("lightbox");
      const isLightboxVisible = lb && lb.classList.contains("lightbox-visible");
      if (isLightboxVisible) return;
      if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) {
        e.preventDefault();
        horizontal.scrollLeft += e.deltaY;
      }
    };
    window.addEventListener("wheel", windowWheelHandler, { passive: false });
  }

  // Initialize and respond to viewport changes
  attachHandlers();
  desktopMQ.addEventListener("change", attachHandlers);
  finePointerMQ.addEventListener("change", attachHandlers);
</script>

<style>
  /* Hide horizontal scrollbar while preserving scroll behavior */
  #photo-horizontal::-webkit-scrollbar {
    display: none;
    width: 0;
    height: 0;
  }
  #photo-horizontal {
    -ms-overflow-style: none; /* IE/Edge */
    scrollbar-width: none; /* Firefox */
    touch-action: pan-y pinch-zoom; /* allow natural vertical scroll on touch */
  }
</style>
