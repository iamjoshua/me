<!-- Lightbox Modal -->
<div
  id="lightbox"
  class="fixed inset-0 z-50 bg-white bg-opacity-95 flex items-center justify-center p-4 lightbox-hidden"
  role="dialog"
  aria-modal="true"
>
  <div class="relative w-full h-full flex items-center justify-center">
    <img
      id="lightbox-image"
      src=""
      alt=""
      class="max-w-[90vw] max-h-[90vh] w-auto h-auto object-contain"
    />
    <!-- Prev / Next arrows -->
    <button
      id="prev-photo"
      class="absolute left-2 bottom-6 md:bottom-auto md:top-1/2 md:-translate-y-1/2 text-gray-800 hover:text-gray-900 bg-neutral-100/0 hover:bg-neutral-100/50 rounded-full shadow w-10 h-10 flex items-center justify-center z-10 cursor-pointer select-none"
      onclick="navigateLightbox(-1)"
      aria-label="Previous photo"
    >
      ‹
    </button>
    <button
      id="next-photo"
      class="absolute right-2 bottom-6 md:bottom-auto md:top-1/2 md:-translate-y-1/2 text-gray-800 hover:text-gray-900 bg-neutral-100/0 hover:bg-neutral-100/50 rounded-full shadow w-10 h-10 flex items-center justify-center z-10 cursor-pointer select-none"
      onclick="navigateLightbox(1)"
      aria-label="Next photo"
    >
      ›
    </button>
    <button
      id="close-lightbox"
      class="absolute top-4 right-4 text-gray-600 text-2xl font-light hover:text-gray-800 hover:scale-110 transition-all duration-200 w-8 h-8 flex items-center justify-center z-10 cursor-pointer"
      onclick="handleCloseClick()"
    >
      ×
    </button>
  </div>
</div>

<script>
  // Open by explicit URL and title (legacy)
  function openLightbox(imageUrl: string, title: string) {
    const lightbox = document.getElementById("lightbox");
    const image = document.getElementById("lightbox-image") as HTMLImageElement;

    if (lightbox && image) {
      image.src = imageUrl;
      image.alt = title;
      lightbox.classList.remove("lightbox-hidden");
      lightbox.classList.add("lightbox-visible");
      document.body.style.overflow = "hidden";
    }
  }

  // Open by photo ID: reads data from grid and updates URL
  function openLightboxById(id: string) {
    // Find the matching photo element to read data attributes
    const el = document.querySelector(
      `[data-photo-id="${id}"]`,
    ) as HTMLElement | null;
    if (!el) return;

    const imageUrl = el.getAttribute("data-image-url") || "";
    const title = el.getAttribute("data-title") || "";

    openLightbox(imageUrl, title);

    const targetPath = `/photography/${id}`;
    if (location.pathname !== targetPath) {
      history.pushState({ photoId: id }, "", targetPath);
    } else {
      // Ensure state exists so back() works consistently
      if (!history.state || history.state.photoId !== id) {
        history.replaceState({ photoId: id }, "", targetPath);
      }
    }
  }

  function closeLightbox(immediate: boolean = false) {
    const lightbox = document.getElementById("lightbox");
    if (lightbox) {
      if (immediate) {
        const prev = (lightbox as HTMLElement).style.transition;
        (lightbox as HTMLElement).style.transition = "none";
        lightbox.classList.remove("lightbox-visible");
        lightbox.classList.add("lightbox-hidden");
        // Restore transition after state change so future opens animate
        requestAnimationFrame(() => {
          (lightbox as HTMLElement).style.transition = prev || "";
        });
      } else {
        lightbox.classList.remove("lightbox-visible");
        lightbox.classList.add("lightbox-hidden");
      }
      document.body.style.overflow = "auto";
    }
  }

  function handleCloseClick() {
    // Always normalize the URL in-place to avoid a history back navigation
    if (location.pathname.startsWith("/photography/")) {
      history.replaceState(null, "", "/photography");
    }
    closeLightbox();
  }

  function syncFromUrl() {
    const match = location.pathname.match(/^\/photography\/(.+)$/);
    if (match && match[1]) {
      const id = decodeURIComponent(match[1]);
      // If already open to this image, do nothing
      const img = document.getElementById(
        "lightbox-image",
      ) as HTMLImageElement | null;
      if (
        img &&
        img.src &&
        document
          .querySelector(`[data-photo-id="${id}"]`)
          ?.getAttribute("data-image-url") === img.src
      ) {
        return;
      }
      openLightboxById(id);
    } else if (location.pathname === "/photography") {
      closeLightbox();
    }
  }

  // Attach listeners with cleanup to avoid duplication on SPA navigations
  const w = window as any;
  if (typeof w.__lightboxCleanup === "function") {
    try {
      w.__lightboxCleanup();
    } catch {}
  }

  const onKeydown = (e: KeyboardEvent) => {
    if (e.key === "Escape") {
      handleCloseClick();
    } else if (e.key === "ArrowLeft") {
      navigateLightbox(-1);
    } else if (e.key === "ArrowRight") {
      navigateLightbox(1);
    }
  };
  document.addEventListener("keydown", onKeydown);

  const onLightboxClick = (e: MouseEvent) => {
    if (
      e.target === e.currentTarget ||
      e.target === document.getElementById("lightbox-image")
    ) {
      handleCloseClick();
    }
  };
  document
    .getElementById("lightbox")
    ?.addEventListener("click", onLightboxClick);

  const onPopState = () => {
    const isGallery = location.pathname === "/photography";
    if (isGallery) {
      closeLightbox(true);
      return;
    }
    syncFromUrl();
  };
  window.addEventListener("popstate", onPopState);

  const onPageLoad = () => {
    syncFromUrl();
  };
  document.addEventListener("DOMContentLoaded", onPageLoad);
  window.addEventListener("astro:page-load", onPageLoad);

  const cleanup = () => {
    document.removeEventListener("keydown", onKeydown);
    document
      .getElementById("lightbox")
      ?.removeEventListener("click", onLightboxClick as EventListener);
    window.removeEventListener("popstate", onPopState);
    document.removeEventListener("DOMContentLoaded", onPageLoad);
    window.removeEventListener("astro:page-load", onPageLoad);
  };
  w.__lightboxCleanup = cleanup;
  window.addEventListener("astro:before-swap", cleanup, { once: true });

  // Expose globals for use in markup and compatibility
  w.openLightbox = openLightbox;
  w.openLightboxById = openLightboxById;
  w.closeLightbox = closeLightbox;
  w.handleCloseClick = handleCloseClick;

  // Navigation helpers
  function getPhotoIds(): string[] {
    const els = Array.from(
      document.querySelectorAll("[data-photo-id]"),
    ) as HTMLElement[];
    const ids: string[] = [];
    for (const el of els) {
      const id = el.getAttribute("data-photo-id");
      if (id && !ids.includes(id)) ids.push(id);
    }
    return ids;
  }

  function getCurrentIdFromUrl(): string | null {
    const m = location.pathname.match(/^\/photography\/(.+)$/);
    return m ? decodeURIComponent(m[1]) : null;
  }

  function navigateLightbox(delta: number) {
    const ids = getPhotoIds();
    if (!ids.length) return;
    const currentId = getCurrentIdFromUrl();
    let idx = currentId ? ids.indexOf(currentId) : -1;
    if (idx === -1) {
      // Fallback: try matching current image URL
      const img = document.getElementById(
        "lightbox-image",
      ) as HTMLImageElement | null;
      if (img && img.src) {
        idx = ids.findIndex((id) => {
          const el = document.querySelector(
            `[data-photo-id="${id}"]`,
          ) as HTMLElement | null;
          return el?.getAttribute("data-image-url") === img.src;
        });
      }
    }
    if (idx === -1) idx = 0;
    let next = idx + delta;
    if (next < 0) next = ids.length - 1;
    if (next >= ids.length) next = 0;
    const nextId = ids[next];
    if (nextId) {
      openLightboxById(nextId);
    }
  }

  w.navigateLightbox = navigateLightbox;
</script>

<style>
  .lightbox-hidden {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }

  .lightbox-visible {
    opacity: 1;
    pointer-events: auto;
    transition: opacity 0.3s ease-in-out;
  }
</style>
