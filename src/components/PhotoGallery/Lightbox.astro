<!-- Lightbox Modal -->
<div
  id="lightbox"
  class="fixed inset-0 z-50 bg-white bg-opacity-95 flex items-center justify-center p-4 lightbox-hidden"
  role="dialog"
  aria-modal="true"
>
  <div class="relative w-full h-full flex items-center justify-center">
    <!-- Loading spinner -->
    <div
      id="lightbox-spinner"
      class="absolute spinner-hidden"
      aria-label="Loading image"
    >
      <div class="spinner"></div>
    </div>

    <!-- Image wrapper for positioning EXIF relative to image -->
    <div id="lightbox-image-wrapper" class="relative flex flex-col items-end opacity-0 transition-opacity duration-300">
      <img
        id="lightbox-image"
        src=""
        alt=""
        class="max-w-[90vw] max-h-[90vh] w-auto h-auto object-contain"
      />

      <!-- EXIF data display - positioned outside and aligned to right of image -->
      <div
        id="lightbox-exif"
        class="mt-5 md:mt-0 md:fixed md:bottom-5 text-[10px] text-gray-600 font-black flex gap-2 opacity-50 transition-opacity duration-300 hover:opacity-100"
      >
        <span id="exif-iso"></span>
        <span class="text-gray-200">•</span>
        <span id="exif-aperture"></span>
        <span class="text-gray-200">•</span>
        <span id="exif-focal-length"></span>
        <span class="text-gray-200">•</span>
        <span id="exif-shutter-speed"></span>
      </div>
    </div>

    <!-- Prev / Next arrows -->
    <button
      id="prev-photo"
      class="absolute left-2 bottom-6 md:bottom-auto md:top-1/2 md:-translate-y-1/2 text-gray-800 hover:text-gray-900 bg-neutral-100/0 hover:bg-neutral-100/50 rounded-full shadow w-10 h-10 flex items-center justify-center z-10 cursor-pointer select-none"
      onclick="navigateLightbox(-1)"
      aria-label="Previous photo"
    >
      ‹
    </button>
    <button
      id="next-photo"
      class="absolute right-2 bottom-6 md:bottom-auto md:top-1/2 md:-translate-y-1/2 text-gray-800 hover:text-gray-900 bg-neutral-100/0 hover:bg-neutral-100/50 rounded-full shadow w-10 h-10 flex items-center justify-center z-10 cursor-pointer select-none"
      onclick="navigateLightbox(1)"
      aria-label="Next photo"
    >
      ›
    </button>
    <button
      id="close-lightbox"
      class="absolute top-4 right-4 text-gray-600 text-2xl font-light hover:text-gray-800 hover:scale-110 transition-all duration-200 w-8 h-8 flex items-center justify-center z-10 cursor-pointer"
      onclick="handleCloseClick()"
    >
      ×
    </button>
  </div>
</div>

<script>
  // Open by explicit URL and title (legacy)
  function openLightbox(
    imageUrl: string,
    title: string,
    exif?: {
      iso: string;
      aperture: string;
      focalLength: string;
      shutterSpeed: string;
    },
  ) {
    const lightbox = document.getElementById("lightbox");
    const image = document.getElementById("lightbox-image") as HTMLImageElement;
    const spinner = document.getElementById("lightbox-spinner");
    const exifContainer = document.getElementById("lightbox-exif");
    const wrapper = document.getElementById("lightbox-image-wrapper");

    if (lightbox && image && wrapper) {
      // Fade out wrapper (contains both image and EXIF)
      wrapper.style.opacity = "0";

      // Show spinner
      if (spinner) {
        spinner.classList.remove("spinner-hidden");
        spinner.classList.add("spinner-visible");
      }

      // Set new image source
      image.src = imageUrl;
      image.alt = title;

      // Update EXIF data
      if (exif && exifContainer) {
        const isoEl = document.getElementById("exif-iso");
        const apertureEl = document.getElementById("exif-aperture");
        const focalLengthEl = document.getElementById("exif-focal-length");
        const shutterSpeedEl = document.getElementById("exif-shutter-speed");

        if (isoEl) isoEl.textContent = exif.iso;
        if (apertureEl) apertureEl.textContent = exif.aperture;
        if (focalLengthEl) focalLengthEl.textContent = exif.focalLength;
        if (shutterSpeedEl) shutterSpeedEl.textContent = exif.shutterSpeed;

        // Filter out empty spans to avoid extra gaps
        const hasExifData =
          exif.iso || exif.aperture || exif.focalLength || exif.shutterSpeed;
        if (hasExifData) {
          exifContainer.style.display = "flex";
        } else {
          exifContainer.style.display = "none";
        }
      }

      // Fade in wrapper when image loads and hide spinner
      image.onload = () => {
        wrapper.style.opacity = "1";
        if (spinner) {
          spinner.classList.remove("spinner-visible");
          spinner.classList.add("spinner-hidden");
        }
      };

      lightbox.classList.remove("lightbox-hidden");
      lightbox.classList.add("lightbox-visible");
      document.body.style.overflow = "hidden";
    }
  }

  // Open by photo ID: reads data from grid and updates URL
  function openLightboxById(id: string) {
    // Find the matching photo element to read data attributes
    const el = document.querySelector(
      `[data-photo-id="${id}"]`,
    ) as HTMLElement | null;
    if (!el) return;

    const imageUrl = el.getAttribute("data-image-url") || "";
    const title = el.getAttribute("data-title") || "";
    const iso = el.getAttribute("data-iso") || "";
    const aperture = el.getAttribute("data-aperture") || "";
    const focalLength = el.getAttribute("data-focal-length") || "";
    const shutterSpeed = el.getAttribute("data-shutter-speed") || "";

    openLightbox(imageUrl, title, { iso, aperture, focalLength, shutterSpeed });

    const targetPath = `/photography/p/${id}`;
    if (location.pathname !== targetPath) {
      history.pushState({ photoId: id }, "", targetPath);
    } else {
      // Ensure state exists so back() works consistently
      if (!history.state || history.state.photoId !== id) {
        history.replaceState({ photoId: id }, "", targetPath);
      }
    }
  }

  function closeLightbox(immediate: boolean = false) {
    const lightbox = document.getElementById("lightbox");
    const image = document.getElementById("lightbox-image") as HTMLImageElement;
    const spinner = document.getElementById("lightbox-spinner");
    const exifContainer = document.getElementById("lightbox-exif");
    const wrapper = document.getElementById("lightbox-image-wrapper");

    if (lightbox) {
      if (immediate) {
        const prev = (lightbox as HTMLElement).style.transition;
        (lightbox as HTMLElement).style.transition = "none";
        lightbox.classList.remove("lightbox-visible");
        lightbox.classList.add("lightbox-hidden");
        // Restore transition after state change so future opens animate
        requestAnimationFrame(() => {
          (lightbox as HTMLElement).style.transition = prev || "";
        });
      } else {
        lightbox.classList.remove("lightbox-visible");
        lightbox.classList.add("lightbox-hidden");
      }
      document.body.style.overflow = "auto";

      // Hide spinner and clear the image
      if (spinner) {
        spinner.classList.remove("spinner-visible");
        spinner.classList.add("spinner-hidden");
      }
      if (image) {
        image.src = "";
        image.alt = "";
      }

      // Reset wrapper opacity
      if (wrapper) {
        wrapper.style.opacity = "0";
      }

      // Clear EXIF data
      if (exifContainer) {
        const isoEl = document.getElementById("exif-iso");
        const apertureEl = document.getElementById("exif-aperture");
        const focalLengthEl = document.getElementById("exif-focal-length");
        const shutterSpeedEl = document.getElementById("exif-shutter-speed");
        if (isoEl) isoEl.textContent = "";
        if (apertureEl) apertureEl.textContent = "";
        if (focalLengthEl) focalLengthEl.textContent = "";
        if (shutterSpeedEl) shutterSpeedEl.textContent = "";
      }
    }
  }

  function handleCloseClick() {
    // Always normalize the URL in-place to avoid a history back navigation
    if (location.pathname.startsWith("/photography/p/")) {
      // Get the collection ID from the page's data attributes or URL
      const collectionElement = document.querySelector("[data-collection-id]");
      const collectionId =
        collectionElement?.getAttribute("data-collection-id");
      const returnPath = collectionId
        ? `/photography/${collectionId}`
        : "/photography";
      history.replaceState(null, "", returnPath);
    }
    closeLightbox();
  }

  function syncFromUrl() {
    const match = location.pathname.match(/^\/photography\/p\/(.+)$/);
    if (match && match[1]) {
      const id = decodeURIComponent(match[1]);
      // If already open to this image, do nothing
      const img = document.getElementById(
        "lightbox-image",
      ) as HTMLImageElement | null;
      if (
        img &&
        img.src &&
        document
          .querySelector(`[data-photo-id="${id}"]`)
          ?.getAttribute("data-image-url") === img.src
      ) {
        return;
      }
      openLightboxById(id);
    } else if (location.pathname === "/photography") {
      closeLightbox();
    }
  }

  // Attach listeners with cleanup to avoid duplication on SPA navigations
  const w = window as any;
  if (typeof w.__lightboxCleanup === "function") {
    try {
      w.__lightboxCleanup();
    } catch {}
  }

  const onKeydown = (e: KeyboardEvent) => {
    if (e.key === "Escape") {
      handleCloseClick();
    } else if (e.key === "ArrowLeft") {
      navigateLightbox(-1);
    } else if (e.key === "ArrowRight") {
      navigateLightbox(1);
    }
  };
  document.addEventListener("keydown", onKeydown);

  const onLightboxClick = (e: MouseEvent) => {
    if (
      e.target === e.currentTarget ||
      e.target === document.getElementById("lightbox-image")
    ) {
      handleCloseClick();
    }
  };
  document
    .getElementById("lightbox")
    ?.addEventListener("click", onLightboxClick);

  const onPopState = () => {
    const isGallery =
      location.pathname === "/photography" ||
      location.pathname.match(/^\/photography\/[^\/]+$/);
    if (isGallery) {
      closeLightbox(true);
      return;
    }
    syncFromUrl();
  };
  window.addEventListener("popstate", onPopState);

  const onPageLoad = () => {
    syncFromUrl();
  };
  document.addEventListener("DOMContentLoaded", onPageLoad);
  window.addEventListener("astro:page-load", onPageLoad);

  const cleanup = () => {
    document.removeEventListener("keydown", onKeydown);
    document
      .getElementById("lightbox")
      ?.removeEventListener("click", onLightboxClick as EventListener);
    window.removeEventListener("popstate", onPopState);
    document.removeEventListener("DOMContentLoaded", onPageLoad);
    window.removeEventListener("astro:page-load", onPageLoad);
  };
  w.__lightboxCleanup = cleanup;
  window.addEventListener("astro:before-swap", cleanup, { once: true });

  // Expose globals for use in markup and compatibility
  w.openLightbox = openLightbox;
  w.openLightboxById = openLightboxById;
  w.closeLightbox = closeLightbox;
  w.handleCloseClick = handleCloseClick;

  // Navigation helpers
  function getPhotoIds(): string[] {
    const els = Array.from(
      document.querySelectorAll("[data-photo-id]"),
    ) as HTMLElement[];
    const ids: string[] = [];
    for (const el of els) {
      const id = el.getAttribute("data-photo-id");
      if (id && !ids.includes(id)) ids.push(id);
    }
    return ids;
  }

  function getCurrentIdFromUrl(): string | null {
    const m = location.pathname.match(/^\/photography\/p\/(.+)$/);
    return m ? decodeURIComponent(m[1]) : null;
  }

  function navigateLightbox(delta: number) {
    const ids = getPhotoIds();
    if (!ids.length) return;
    const currentId = getCurrentIdFromUrl();
    let idx = currentId ? ids.indexOf(currentId) : -1;
    if (idx === -1) {
      // Fallback: try matching current image URL
      const img = document.getElementById(
        "lightbox-image",
      ) as HTMLImageElement | null;
      if (img && img.src) {
        idx = ids.findIndex((id) => {
          const el = document.querySelector(
            `[data-photo-id="${id}"]`,
          ) as HTMLElement | null;
          return el?.getAttribute("data-image-url") === img.src;
        });
      }
    }
    if (idx === -1) idx = 0;
    let next = idx + delta;
    if (next < 0) next = ids.length - 1;
    if (next >= ids.length) next = 0;
    const nextId = ids[next];
    if (nextId) {
      openLightboxById(nextId);
    }
  }

  w.navigateLightbox = navigateLightbox;
</script>

<style>
  .lightbox-hidden {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }

  .lightbox-visible {
    opacity: 1;
    pointer-events: auto;
    transition: opacity 0.3s ease-in-out;
  }

  .spinner-hidden {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease-in-out;
  }

  .spinner-visible {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(0, 0, 0, 0.1);
    border-top-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>
