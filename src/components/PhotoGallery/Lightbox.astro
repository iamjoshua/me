<!-- Lightbox Modal -->
<div
  id="lightbox"
  class="fixed inset-0 z-50 bg-white bg-opacity-95 flex items-center justify-center p-4 lightbox-hidden"
>
  <div class="relative w-full h-full flex items-center justify-center">
    <img
      id="lightbox-image"
      src=""
      alt=""
      class="max-w-[90vw] max-h-[90vh] w-auto h-auto object-contain"
    />
    <button
      id="close-lightbox"
      class="absolute top-4 right-4 text-gray-600 text-2xl font-light hover:text-gray-800 hover:scale-110 transition-all duration-200 w-8 h-8 flex items-center justify-center z-10 cursor-pointer"
      onclick="handleCloseClick()"
    >
      Ã—
    </button>
  </div>
  
</div>

<script>
  // Open by explicit URL and title (legacy)
  function openLightbox(imageUrl: string, title: string) {
    const lightbox = document.getElementById("lightbox");
    const image = document.getElementById("lightbox-image") as HTMLImageElement;

    if (lightbox && image) {
      image.src = imageUrl;
      image.alt = title;
      lightbox.classList.remove("lightbox-hidden");
      lightbox.classList.add("lightbox-visible");
      document.body.style.overflow = "hidden";
    }
  }

  // Open by photo ID: reads data from grid and updates URL
  function openLightboxById(id: string) {
    // Find the matching photo element to read data attributes
    const el = document.querySelector(`[data-photo-id="${id}"]`) as HTMLElement | null;
    if (!el) return;

    const imageUrl = el.getAttribute('data-image-url') || '';
    const title = el.getAttribute('data-title') || '';

    openLightbox(imageUrl, title);

    const targetPath = `/photography/${id}`;
    if (location.pathname !== targetPath) {
      history.pushState({ photoId: id }, '', targetPath);
    } else {
      // Ensure state exists so back() works consistently
      if (!history.state || history.state.photoId !== id) {
        history.replaceState({ photoId: id }, '', targetPath);
      }
    }
  }

  function closeLightbox(immediate: boolean = false) {
    const lightbox = document.getElementById("lightbox");
    if (lightbox) {
      if (immediate) {
        const prev = (lightbox as HTMLElement).style.transition;
        (lightbox as HTMLElement).style.transition = 'none';
        lightbox.classList.remove("lightbox-visible");
        lightbox.classList.add("lightbox-hidden");
        // Restore transition after state change so future opens animate
        requestAnimationFrame(() => {
          (lightbox as HTMLElement).style.transition = prev || '';
        });
      } else {
        lightbox.classList.remove("lightbox-visible");
        lightbox.classList.add("lightbox-hidden");
      }
      document.body.style.overflow = "auto";
    }
  }

  function handleCloseClick() {
    // Always normalize the URL in-place to avoid a history back navigation
    if (location.pathname.startsWith('/photography/')) {
      history.replaceState(null, '', '/photography');
    }
    closeLightbox();
  }

  function syncFromUrl() {
    const match = location.pathname.match(/^\/photography\/(.+)$/);
    if (match && match[1]) {
      const id = decodeURIComponent(match[1]);
      // If already open to this image, do nothing
      const img = document.getElementById("lightbox-image") as HTMLImageElement | null;
      if (img && img.src && document.querySelector(`[data-photo-id="${id}"]`)?.getAttribute('data-image-url') === img.src) {
        return;
      }
      openLightboxById(id);
    } else if (location.pathname === '/photography') {
      closeLightbox();
    }
  }

  // Handle keyboard close
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      handleCloseClick();
    }
  });

  // Close on background or image click
  document.getElementById("lightbox")?.addEventListener("click", (e) => {
    if (e.target === e.currentTarget || e.target === document.getElementById("lightbox-image")) {
      handleCloseClick();
    }
  });

  // Sync when navigating with browser back/forward
  window.addEventListener('popstate', () => {
    // When navigating back to the gallery, close instantly to avoid visual jank
    const isGallery = location.pathname === '/photography';
    if (isGallery) {
      closeLightbox(true);
      return;
    }
    syncFromUrl();
  });

  // Sync on initial load as well
  document.addEventListener('DOMContentLoaded', () => {
    syncFromUrl();
  });

  // Expose globals for use in markup and compatibility
  (window as any).openLightbox = openLightbox;
  (window as any).openLightboxById = openLightboxById;
  (window as any).closeLightbox = closeLightbox;
  (window as any).handleCloseClick = handleCloseClick;
</script>

<style>
  .lightbox-hidden {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }

  .lightbox-visible {
    opacity: 1;
    pointer-events: auto;
    transition: opacity 0.3s ease-in-out;
  }
</style>
