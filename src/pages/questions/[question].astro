---
import { getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Container from "../../components/Container.astro";
import Header from "@/components/elements/Header.astro";

export async function getStaticPaths() {
  const questions = await getCollection("questions");
  return questions.map((question) => ({
    params: { question: question.id },
  }));
}

const { question } = Astro.params;
const entry = await getEntry("questions", question);

if (!entry) {
  return Astro.redirect("/404");
}

const { Content } = await render(entry);
---

<Layout title={entry.data.title}>
  <div class="flex flex-col lg:flex-row">
    <header class="h-[calc(100dvh*0.8)] lg:h-dvh lg:w-1/3">
      <div
        class="w-full lg:w-1/3 h-dvh lg:h-dvh lg:fixed rounded-4xl flex flex-col justify-center m-4 md:m-10 lg:m-10 lg:mt-0"
      >
        <div class="hidden md:block lg:absolute lg:top-10 left-8 lg:left-0">
          <a
            href="/questions"
            class="flex items-center gap-2 text-gray-600 hover:text-gray-900 text-sm font-medium"
          >
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Questions
          </a>
        </div>
        <div
          class="text-sm font-medium tracking-widest text-gray-500 uppercase mb-4"
        >
          Consciousness
        </div>
        <div
          class={`text-3xl md:text-4xl font-light text-gray-700 mb-18 italic leading-tight font-[Crimson_Text]`}
        >
          Phenomenal Character
        </div>

        <h1
          class="text-7xl md:text-6xl lg:text-7xl xl:text-7xl xl:tracking-tight lg:leading-18 font-bold leading-none tracking-tighter text-neutral-800"
        >
          {entry.data.title}?
        </h1>

        {entry.data.date && <p class="text-gray-600 mb-6">{entry.data.date}</p>}
        {
          entry.data.tags && (
            <div class="flex flex-wrap gap-2 mb-6">
              {entry.data.tags.map((tag) => (
                <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                  {tag}
                </span>
              ))}
            </div>
          )
        }
      </div>
    </header>

    <Container>
      <main class="h-full max-w-4xl mx-auto">
        <div class="h-[calc(100dvh/5)]"></div>
        <div class="w-full md:w-2/3 mb-22">
          <p class="text-2xl text-neutral-700 font-thin leading-10 mb-12">
            {entry.data.elaboration}
          </p>
          <div class="hidden">
            <Header>My Current Position</Header>
            {entry.data.position}
          </div>
        </div>
        <article class="prose prose-md max-w-none pb-32">
          <Content />
        </article>
      </main>
    </Container>
  </div>
</Layout>
