---
import { getCollection, getEntry, render } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Container from "@/components/Container.astro";
import Header from "@/components/elements/Header.astro";
import Back from "@/components/elements/Back.astro";
import Animate from "@/components/Animate.astro";
import AnimateOnLoad from "@/components/AnimateOnLoad.astro";
import { cn } from "@/lib/utils";

export async function getStaticPaths() {
  const essays = await getCollection("essays");
  return essays.map((essay) => ({
    params: { essay: essay.id },
  }));
}

const { essay } = Astro.params;
const entry = await getEntry("essays", essay);

if (!entry) {
  return Astro.redirect("/404");
}

const { Content } = await render(entry);
---

<Layout title={entry.data.title}>
  <div class="flex flex-col lg:flex-row">
    <header class="h-[calc(100dvh*0.8)] lg:h-dvh lg:w-1/3">
      <div
        class="w-full lg:w-1/3 h-dvh lg:h-dvh lg:fixed rounded-4xl flex flex-col justify-center m-4 md:m-10 lg:m-10 lg:mt-0"
      >
        <Back href="/essays" label="Essays" />
        <AnimateOnLoad
          type="fade"
          class="text-sm font-medium tracking-widest text-gray-500 uppercase mb-4"
        >
          Writing
        </AnimateOnLoad>
        <AnimateOnLoad
          type="slideDown"
          class={`text-3xl md:text-4xl font-light text-gray-700 mb-18 italic leading-tight font-[Crimson_Text]`}
        >
          Essays
        </AnimateOnLoad>
        <AnimateOnLoad type="slideUp" name={entry.id}>
          <h1
            class="text-7xl md:text-6xl lg:text-7xl xl:text-7xl xl:tracking-tight lg:leading-18 font-bold leading-none tracking-tighter text-neutral-800"
          >
            {entry.data.title}
          </h1>
        </AnimateOnLoad>

        {
          entry.data.lastEdited && (
            <p class="text-gray-500 text-sm mb-4">
              hello Edited on:{" "}
              {new Date(entry.data.lastEdited).toLocaleDateString()}
            </p>
          )
        }
        {entry.data.date && <p class="text-gray-600 mb-6">{entry.data.date}</p>}
        {
          entry.data.tags && (
            <div class="flex flex-wrap gap-2 mb-6">
              {entry.data.tags.map((tag) => (
                <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                  {tag}
                </span>
              ))}
            </div>
          )
        }
      </div>
    </header>

    <Container>
      <main class="h-full max-w-4xl mx-auto">
        <div class="h-[calc(100dvh/5)]"></div>
        <div class="w-full md:w-2/3 mb-22">
          {
            entry.data.excerpt && (
              <AnimateOnLoad
                as="p"
                delay={0.2}
                class="text-2xl text-neutral-700 font-thin leading-10 mb-12"
              >
                {entry.data.excerpt}
              </AnimateOnLoad>
            )
          }
        </div>

        <AnimateOnLoad type="slideUp" delay={0.3}>
          <article
            class={cn(
              "prose prose-base max-w-none pb-32 prose-stone",
              "[&_.warning]:bg-gray-100 [&_.warning]:border-0 [&_.warning]:bg-red-800/3 [&_.warning]:px-4 [&_.warning]:py-3 [&_.warning]:my-4 [&_.warning]:rounded-md [&_.warning]:text-red-800/70 [&_.warning]:font-bold",
            )}
          >
            <Content />
          </article>
        </AnimateOnLoad>
      </main>
    </Container>
  </div>
</Layout>
